#include "BCP.h"

// ================== Caracteristicas construtivas ==================
#define MAX_BOX_MIN_DISTANCE 25
#define DISTANCIA_ENTRE_RODAS 16.8 // cm
#define DIAMETRO_RODA 5.6 // cm
#define MOTOR_E   OUT_A // Motor da esquerda
#define MOTOR_D   OUT_B // Mootor da direita
#define MOTOR_ED  OUT_AB

// ================== Constantes ==================
#define CLOCKWISE           0
#define COUNTERCLOCKWISE    1
#define POWER               30
#define GRAU_PARA_GIRO_90   260
#define P                   90
#define I                   40
#define D                   70
#define QUEUE_SIZE 5 // Tamanho máximo da fila de pontos
//
#define COR_PRETA_LMI 28
#define COR_PRETA_LMS 40
#define COR_PRATA_LMI 63
#define COR_PRATA_LMS 80
//
#define BLACK_COLOR  0
#define SILVER_COLOR 1
#define RED_COLOR    2

//================== Portas de Sensores e Atuadores ==================
#define LIGHT_OUT S2
#define TOUCH_OUT S3
#define ULTRASONIC_OUT S4
#define ULTRASONIC_SENSOR  IN_4
#define TOUCH_SENSOR       IN_3
#define LIGHT_SENSOR       IN_2
//
#define TOUCH_SENSOR_STATE SENSOR_3
#define LIGHT_SENSOR_STATE SENSOR_2

/*
-----------------------
      Prototypes
-----------------------
*/
void handleSupervisorRequest(byte requestCodeb);
void treatSupervisorRequest();
void configureSensors();
void calcula_deslocamento();
void muda_bussola(short turn_pct);
//void playBeep(short frequency, byte ntimes);
void segue_frente(bool control);
bool fim_de_curso();
void playBeep(byte ntime);
void goFoward(byte angle);
void playAlertBeep(byte ntime);
float seno(int grau);
float cosseno(int grau);
void sscanfd(string &input, unsigned short &numbers[], int &init);
void girar_eixo_v3(short turn_pct, long graus_curva);
bool segue_frente_cm(float cm, bool evitarObstaculo);
void segue_frente_cm_V2(float cm);
void fillCoordArray(unsigned short src[], byte srcSize, unsigned short &dest[]);
bool executa_trajetoria();
void alinharOrientacao(int targetOrientation);
void DESVIA_OBSTACULO();
unsigned short Floor(unsigned short num);


float seno(int grau){
	if (grau==0) return 0; 
	else if(grau==90) return 1;
	else if(grau==180) return 0;
	else if(grau==270) return -1;
}
float cosseno(int grau){
	if (grau==0) return 1; 
	else if(grau==90) return 0;
	else if(grau==180) return -1;
	else if(grau==270) return 0;
}
/*
-----------------------
    Global Variables
-----------------------
*/
//enum REGIAO { BASE, BANCADA, PATIO, ESTOQUE };// PATIO é a região onde tem várias bancadas
long gr_ant_RE;// = MotorRotationCount(MOTOR_A);// Roda esquerda
long gr_ant_RD;// Roda direita -> grau da roda direita
mutex mutexRoda;// mutex para alterar os estados do robô

int orientacao;// Indica a orientação do robo -> (90)NORTE - (180)OESTE - (270)SUL - (0)LESTE
float deslocamento[2];//Indica o deslocamento em torno de X e Y respectivamente
mutex mutexDeslocamento;// mutex para alterar os estados do robô
mutex whichSideMutex;

byte regiao; // 0-> BASE, 1->BANCADA, 2->MEIO, 3->ESTOQUE
byte status;
bool RobotInOperation = false;// Indica se o robô está disponivel na base
mutex RobotInOperationMutex;

byte whichSide = 0;
byte robotStatus = AWAITING;
byte requestCode = UCHAR_MAX;

string requestMsg, msgToSend = "";
string dataMsgToSend, responseToRequest = "";
mutex messageMutex;

bool strangleBox = false;
mutex strangleBoxMutex;

unsigned short coordinates[50][2] = {0}; // Array para armazenar os elementos da fila
unsigned short coords[100] = {0};
int front = 0;         // Índice do início da fila
byte TAM_LIST = 0; // tamanho da fila (é recebido via bluetooth)

/*
        =============================================
                        MODULOS BLUETOOTH
        =============================================
*/
/// @brief
/// @param requestCodeb
void handleSupervisorRequest(byte requestCodeb)
{
     string coordsPt1, coordsPt2, coordsPt3;
     unsigned short numbers[4] = {0};
     int init = 0;
     if (!RobotInOperation && requestCodeb == GO)
     {
     		ClearScreen();
          	TextOut(0, LCD_LINE1, "readFirst");
          	Wait(900);
          	readMessage(coordsPt1);
          	Wait(400);
          	//TextOut(0, LCD_LINE2, x);
          	readMessage(coordsPt2);
          	//TextOut(0, LCD_LINE3, y);
          	Wait(400);
          	readMessage(coordsPt3);
          	//TextOut(0, LCD_LINE4, z);
          	//Wait(1000);
           	PlayTone(300, 2000);
           	sscanfd(coordsPt1, coords, init);
           	sscanfd(coordsPt2, coords, init);
           	sscanfd(coordsPt3, coords, init);
           	//Wait(300);
           	//ClearScreen();
           	//TextOut(0, LCD_LINE1, "INIT ANTES");
           	//NumOut(0, LCD_LINE2, init);
           	//Wait(2000);
           	//byte i = 0;
           	//ClearScreen();
           	//TextOut(0, LCD_LINE1, "ANTES DO WHILE");
           	//Wait(2000);
           	/*
           	while ( i < init)
           	{
           		ClearScreen();
           		TextOut(0, LCD_LINE1, "A");
           		NumOut(0, LCD_LINE2, coords[i]);
              	NumOut(0, LCD_LINE3, init);
           		Wait(1000);
           		i++;
           	}
           	*/
          TAM_LIST = init/2;
          robotStatus = ONGOING;
          RobotInOperation = true;
          //formatMessage(robotStatus, msgToSend);
          //sendMessage(msgToSend, RESPONSE);
          PlaySound(SOUND_CLICK);

     }
     else if (requestCodeb != GO) playAlertBeep(5);
}


void DESVIA_OBSTACULO(){
	PlayTone(2000, 500); 
    // Desvia do obstáculo e retorna à trajetória original
    girar_eixo_v3(100, 90);  // Gira 90 graus para a esquerda
    segue_frente_cm_V2(20); // Avança 20 cm
    girar_eixo_v3(-100, 90);  // Gira 90 graus para a direita
    segue_frente_cm_V2(40); // Avança 40 cm
    girar_eixo_v3(-100, 90); // Gira 90 graus para a direita
    segue_frente_cm_V2(20); // Avança 20 cm
    girar_eixo_v3(100, 90); // Gira 90 graus para a esquerda
    Off(MOTOR_ED);
}


void treatSupervisorRequest()
{
     byte requestCode;
     string recvdMessage;
     if (readMessage(recvdMessage))
     {
          ClearScreen();
          requestCode = parseMessage(recvdMessage);
          requestMsg = recvdMessage;
          TextOut(0, LCD_LINE1, "Received");
          TextOut(0, LCD_LINE2, recvdMessage);
          NumOut(0, LCD_LINE3, requestCode);
          TextOut(0, LCD_LINE4, recvdMessage[0]);
          TextOut(0, LCD_LINE5, recvdMessage[2]);
          handleSupervisorRequest(requestCode);
     }
}


/*
        =============================================
                MODULOS LÓGICA DO PROBLEMA
        =============================================
*/
void configureSensors() {
    SetSensorTouch(TOUCH_SENSOR);
    SetSensorUltrasonic(ULTRASONIC_SENSOR);
    SetSensorLight(LIGHT_SENSOR);
}


bool fim_de_curso(){
	// Se o sensor de toque foi acionado ou se estou lendo um valor que está no intervalo da cor preta
	if ( Sensor(TOUCH_SENSOR) || (Sensor(LIGHT_OUT) > COR_PRETA_LMI && Sensor(LIGHT_OUT) < COR_PRETA_LMS)){
		return true;
	}
	return false;
}

/**
se evitarObstaculo==true eu não olho pro sensor ultrassom
**/
bool segue_frente_cm(float cm, bool evitarObstaculo){
	long passo = (cm*360)/(PI*DIAMETRO_RODA);
	long grau = MotorRotationCount(MOTOR_D) + passo;
	//
	OnFwdSyncPID(MOTOR_ED, POWER, 0, P, I, D);
	//while (MotorRotationCount(MOTOR_D) != grau && (evitarObstaculo==false || SensorUS(ULTRASONIC_OUT)>MAX_BOX_MIN_DISTANCE)){};
	while (MotorRotationCount(MOTOR_D) < grau && !(Sensor(TOUCH_OUT))){};
	Off(MOTOR_ED);
    Wait(SEC_1);
    // Verifico se saí por ter andando quanto eu queria ou por ter encontrado um obstáculo
    if (Sensor(TOUCH_OUT)){
        //DESVIA_OBSTACULO();
        return true;
    }
    return false;
    // TALVEZ EU TENHA QUE FAZER ELE TESTAR DE NOVO SE AINDA PRECISA SEGUIR EM FRENTE POR X GRAUS
}


void segue_frente_cm_V2(float cm){
	long passo = (cm*360)/(PI*DIAMETRO_RODA);
	long grau = MotorRotationCount(MOTOR_D) + passo;
	//
	OnFwdSyncPID(MOTOR_ED, POWER, 0, 90, 40, 70);
	while (MotorRotationCount(MOTOR_D) < grau ){};
	Off(MOTOR_ED);
    Wait(SEC_1);
}


/*
Send robot position X and Y coordinates
every one sec
*/
// falta adicionar uma variavel de controle
// para quebrar o laco (com break)
task sendRobotPosition(){
    bool InOperation = false;// Indica se o robô está disponivel na base
	while (1)
     	{
          Wait(900);
          //PlayTone(300, 1000);
          Acquire(RobotInOperationMutex);
          InOperation = RobotInOperation;
          Release(RobotInOperationMutex);

          if (InOperation){
               // Chama o mutex para não ler enquanto alguém muda
               Acquire(mutexDeslocamento);
               formatDataMessage(deslocamento[0], deslocamento[1], dataMsgToSend);
               //formatDataMessage(0, 0, 1, dataMsgToSend);
               Release(mutexDeslocamento);
               sendMessage(dataMsgToSend, POSITION);
          }      
          
     }
     
}
/*
Calcula a distância Percorrida a cada X tempos
*/
task odometria(){
	/*
	short i;
	for (i = 392; i < 1319; i=i+102){
		PlayTone(i, 700);
		Wait(500);
	}
	*/
	while (1)
	{

		//TextOut(6, LCD_LINE1, "ODOMETRIA RODANDO");
		Acquire(RobotInOperationMutex);
		if (RobotInOperation){
			ClearScreen();
			TextOut(0, LCD_LINE1, "ROBÔ EM OPERACAO");
			Acquire(mutexDeslocamento);
			calcula_deslocamento();
			Release(mutexDeslocamento);
			Wait(500);
		}
		/*
		else if(!RobotInOperation)
		{
			TextOut(0, LCD_LINE1, "SAINDO ODO");
			Wait(1000);
			break;
		}*/
		Release(RobotInOperationMutex);
	}
}


/*
Read Supervisor messages and
show them on NXT display
*/
task readFirstSupervisorMessage()
{
     string x, y, z;
     unsigned short numbers[4] = {0};
     int init = 0;
     while (1)
     {
          ClearScreen();
          TextOut(5, LCD_LINE1, "Wait for the");
          TextOut(5, LCD_LINE2, "first msg");
          Acquire(RobotInOperationMutex);
          treatSupervisorRequest();
          if (RobotInOperation)
          {
               	Release(RobotInOperationMutex);
               	Wait(50000);
               	break;
          }
          //playBeep(6);
          Release(RobotInOperationMutex);
     }
}


void playBeep(byte ntime)
{
	while (--ntime)
	{
		PlayTone(300, 500);
		Wait(500);
	}
}


void muda_bussola(short turn_pct){
	Acquire(mutexDeslocamento);
	/////// Ao girar para direita
	if(turn_pct == 100){
          orientacao = orientacao - 90;
	}
	/////// Ao girar para esquerda
	else if (turn_pct==-100){
          orientacao = orientacao + 90;
	}
    if (orientacao == 360) orientacao = 0;
	if (orientacao == -90) orientacao = 270;
	Release(mutexDeslocamento);
}

void calcula_deslocamento(){
     // Pego o grau atual
     long RE_Atual = MotorRotationCount(MOTOR_E);
     long RD_Atual = MotorRotationCount(MOTOR_D);
     // Com esta conta eu tenho o deslocamento nulo ao girar no proprio eixo
     long desloc_grau = ((RE_Atual -gr_ant_RE) + (RD_Atual -gr_ant_RD))/2;
     float desloc_cm = -((2*PI*(DIAMETRO_RODA/2)*desloc_grau)/360);
     // Atualizo o grau anterior do robo
     gr_ant_RE = RE_Atual;
     gr_ant_RD = RD_Atual;
     // Atualizo a distancia do proprio robo
	 // em X
    //  float direcao_rad = orientacao*(PI/180.0);
      deslocamento[0] = deslocamento[0] + cosseno(orientacao)*desloc_cm;// seno e  cosseno recebem o valor em rads
	//deslocamento[0] = desloc_cm;
	 // em Y
     deslocamento[1] = deslocamento[1] + seno(orientacao)*desloc_cm;
	//deslocamento[1] = orientacao;
    //  NumOut(5, LCD_LINE1, gr_ant_RE);
    //  NumOut(5, LCD_LINE2, gr_ant_RD);
     //
}


void playAlertBeep(byte ntime)
{
	while (ntime--)
	{
		PlayTone(2000, 500);
		Wait(700);
	}
}


void sscanfd(string &input, unsigned short &numbers[], int &init)
{
	byte auxNumbers = 0;
	unsigned short number;
	byte digit;
	string accumulator = "";
	string aux;
	unsigned int inputSize = StrLen(input);
	byte i;
	for (i = 0; i < inputSize; i++)
	{
		while (isdigit(input[i]))
		{
			digit = input[i] - 48;
			aux = NumToStr(digit);
			accumulator = StrCat(accumulator, aux);
			i++;
		}
		number = StrToNum(accumulator);
		numbers[auxNumbers+init] = number;
		auxNumbers++;
		ClearScreen();
		TextOut(0, LCD_LINE1, accumulator);
		Wait(1000);
		accumulator = "";
	}
	init = init + auxNumbers;
	ClearScreen();
	Wait(1000);
	return;
}


void girar_eixo_v3(short turn_pct, long graus_curva){
	Acquire(mutexDeslocamento);
	calcula_deslocamento();
	Release(mutexDeslocamento);

    long grau_giro_roda = (graus_curva*DISTANCIA_ENTRE_RODAS)/DIAMETRO_RODA;
	long passo_esquerdo = MotorRotationCount(MOTOR_E) + (-turn_pct/100)*grau_giro_roda;
	long passo_direito = MotorRotationCount(MOTOR_D) + (turn_pct/100)*grau_giro_roda;
	// Girando ambos
	OnFwdSyncPID(MOTOR_ED, POWER, turn_pct, P, I, D);
	while ((MotorRotationCount(MOTOR_D) != passo_direito) && (MotorRotationCount(MOTOR_E) != passo_esquerdo)){}
	Off(MOTOR_ED);
	Wait(SEC_1);
	// Se estiver girando para direita
	if(turn_pct == -100){
		// Girando oq falta
		//OnFwd(MOTOR_D, (turn_pct/100)*POWER);
        // se RESET_ALL  der ruim, colocar o 0 no lugar
        // se OUT_REGMODE_SPEED der ruim, colocar o 0 no lugar
        OnFwdRegPID(MOTOR_D, (turn_pct/100)*POWER, 0, P, I, D);
		while (MotorRotationCount(MOTOR_D) > passo_direito){}
		Off(MOTOR_D);
		// Girando oq falta
		//OnFwd(MOTOR_E, -(turn_pct/100)*POWER);
        OnFwdRegPID(MOTOR_E, -(turn_pct/100)*POWER, 0, P, I, D);
		while (MotorRotationCount(MOTOR_E) < passo_esquerdo){}
		Off(MOTOR_E);
	}
	// Se estiver girando para direita
	else{
		// Girando oq falta
		OnFwdRegPID(MOTOR_D, (turn_pct/100)*POWER, 0, P, I, D);
		//TextOut(0, LCD_LINE3, "já chamei esquerda");
		//OnFwd(MOTOR_D, (turn_pct/100)*POWER);
		while (MotorRotationCount(MOTOR_D) < passo_direito){}
		Off(MOTOR_D);
		//TextOut(0, LCD_LINE3, "passei while");//===============================================================================
		// Girando oq falta
		//OnFwd(MOTOR_E, -(turn_pct/100)*POWER);
		OnFwdRegPID(MOTOR_E, -(turn_pct/100)*POWER, 0, P, I, D);
		while (MotorRotationCount(MOTOR_E) > passo_esquerdo){}
		Off(MOTOR_E);
	}
	muda_bussola(turn_pct);
	Off(MOTOR_ED);
	Wait(SEC_1);
}



// ==================== MOVIMENTAÇÃO PBL3 ====================
// Função para alinhar a orientação do robô em relação a um alvo (em graus)
void alinharOrientacao(int targetOrientation) {
    Acquire(mutexDeslocamento);
    long diff = (targetOrientation - orientacao);
    Release(mutexDeslocamento);

    if (diff > 0) { // Gire no sentido anti-horário
        girar_eixo_v3(100, abs(diff));
    } else if (diff < 0) { // Gire no sentido horário
        girar_eixo_v3(-100, abs(diff));
    }
    Acquire(mutexDeslocamento);
    orientacao = targetOrientation; // Atualize a orientação atual
    Release(mutexDeslocamento);
}

void fillCoordArray(unsigned short src[], byte srcSize, unsigned short &dest[])
{
	byte i;
	byte auxCol = 0, auxLine = 0;
	for(i = 0; i < srcSize; i++)
	{
		dest[i] = src[i];
		if(i > 0 && i % 2 == 0) auxLine++;
	}
	return;
}


bool executa_trajetoria(){
	string responseMsg = "";
    bool obstaculo = false;
    int orientacaoAux = 0;
    int currentX = 0, currentY = 0;
    for (int i = 0; i < TAM_LIST; i++) {
        Acquire(mutexDeslocamento);
        currentX = deslocamento[0];
        currentY = deslocamento[1];
        Release(mutexDeslocamento);
       
        int targetX = coords[(i * 2) + 0];
        int targetY = coords[(i * 2) + 1];
	// Como nunca vamos para a posição (0,0), se tiver isso significa que ele terminou tudo
	if (targetX==0 && targetY==0){
		break;
	}

        TextOut(0, LCD_LINE3, "em x=");
        NumOut(0, LCD_LINE4, targetX);
        TextOut(0, LCD_LINE5, "em y=");
        NumOut(0, LCD_LINE6, targetY);
	//===================== ALINHA O X ===================== //
        if (currentX < targetX) { // Movendo para o leste (0°)
            alinharOrientacao(0);
            obstaculo = segue_frente_cm(targetX-currentX, true);
            // SE TIVER ACHADO OBSTACULO, EU PROCURO O PRIMEIRO PONTO QUE EU AINDA NÃO PASSEI
        } else if (currentX > targetX) { // Movendo para o oeste (180°)
            alinharOrientacao(180);
            obstaculo=segue_frente_cm(currentX-targetX, true);
        }
        ///// Vejo se devo procurar o próximo ponto
        if (obstaculo){
            Acquire(mutexDeslocamento);
            currentX = deslocamento[0];
            currentY = deslocamento[1];
            orientacaoAux = orientacao;
            Release(mutexDeslocamento);
            DESVIA_OBSTACULO();
            Acquire(mutexDeslocamento);
            currentX = deslocamento[0];
            currentY = deslocamento[1];
            orientacaoAux = orientacao;
            Release(mutexDeslocamento);
            //----- Vejo se devo procurar o próximo ponto em x
            for (int j = i; j < TAM_LIST; j++) {
                targetX = coords[(j * 2) + 0];
                targetY = coords[(j * 2) + 1];
                // Procuro pelo primeiro ponto maior que minha posição
                if (orientacaoAux == 0){
                    if (targetX > currentX){
                        i = j-1;
                        break;
                    }
                } else if (orientacaoAux == 180){
                    if (targetX < currentX){
                        i = j-1;
                        break;
                    }
                }
            }
            //
        }
        
	//===================== ALINHA O Y ===================== //
        if (currentY < targetY) { // Movendo para o norte (90°)
            alinharOrientacao(90);
            obstaculo=segue_frente_cm(targetY-currentY, true);
        } else if (currentY > targetY) { // Movendo para o sul (270°)
            alinharOrientacao(270);
            obstaculo=segue_frente_cm(currentY-targetY, true);
        }
        /////
        if (obstaculo){
            Acquire(mutexDeslocamento);
            currentX = deslocamento[0];
            currentY = deslocamento[1];
            orientacaoAux = orientacao;
            Release(mutexDeslocamento);
            //----- Vejo se era o fim da linha e se devo pedir outra rota
            if ((currentY<35 && orientacaoAux==270) || (currentY>140 && orientacaoAux==90) ){// se estou menos que 35 e achei obstaculo
            	TextOut(0, LCD_LINE1, "CAMINHO BLOQ");
        	    formatMessage(ERROR, responseMsg);
			    sendMessage(responseMsg, RESPONSE);
            	//return false; 
            }
            DESVIA_OBSTACULO();
            Acquire(mutexDeslocamento);
            currentX = deslocamento[0];
            currentY = deslocamento[1];
            orientacaoAux = orientacao;
            Release(mutexDeslocamento);
            //----- Vejo se devo procurar o próximo ponto em y
            for (int j = i; j < TAM_LIST; j++) {
                targetX = coords[(j * 2) + 0];
                targetY = coords[(j * 2) + 1];
                // Procuro pelo primeiro ponto maior que minha posição
                if (orientacaoAux == 90){
                    if (targetY > currentY){
                    	TextOut(0, LCD_LINE1, "targ=");
        		NumOut(0, LCD_LINE2, targetY);
                        i = j-1;
                        break;
                    }
                } else if (orientacaoAux == 270){
                    if (targetY < currentY){
                        i = j-1;
                        break;
                    }
                }
            }
        }
    }
    formatMessage(SUCCESS, responseMsg);
    sendMessage(responseMsg, RESPONSE);
    //return true;
}


task main (){
	 string responseMsg = "";
     strangleBox = true;
     SetVolume(100);
     regiao = 0;
     //
     orientacao = 90; // Começa voltado pro norte do mapa
     //
     deslocamento[0] = 0;
     deslocamento[1] = 0;
     //
     //RobotInOperation = true;
     //
     gr_ant_RE = MotorRotationCount(MOTOR_E);
     gr_ant_RD = MotorRotationCount(MOTOR_D);
     configureSensors();
     //goFoward30cmBetter();
     //StartTask(sendRobotPosition);
     StartTask(readFirstSupervisorMessage);
     //StartTask(odometria);
     //StartTask(decideSide);
     while (!RobotInOperation)
     {
     	TextOut(0, LCD_LINE8, "AQUI NO LACO");
     }
     ClearScreen();
     TextOut(0, LCD_LINE1, "finalizando...");
     Wait(2000);
     byte line = 0, col = 0;
     TextOut(0, LCD_LINE3, "TAM_LIST");
     NumOut(0, LCD_LINE4, TAM_LIST);
     for(line = 0; line < TAM_LIST; line++)
     {
     	for(col = 0; col < 2; col++)
     	{
	 		ClearScreen();
 			TextOut(0, LCD_LINE1, "task main");
 			NumOut(0, LCD_LINE2, coords[(line * 2) + col]);
 			Wait(1000);
     	}
     }
     formatMessage(SUCCESS, responseMsg);
	 sendMessage(responseMsg, RESPONSE);
	 
     //executa_trajetoria();// Recebe true se a trajetória foi executada com sucesso  
     //sair_base();
     //achar_estoque();
     //pegar_caixa_v2();
//     sair_estoque();
     //sair_base();
     //achar_bancada();
     //achar_base();
	 //RotateMotorEx(MOTOR_ED, POWER, -360, 0, true, true);
          //RotateMotorEx(MOTOR_ED, POWER, -150, 0, true, true);
          //achar_bancada();
          //achar_base();
     //StartTask(sendRobotPosition);
     //StartTask(odometria);
     // restante do codigo do robo
     //OnFwdSync(MOTOR_ED, POWER+20, 0);
     //Off(MOTOR_ED);
     //segue_frente_v2();
     //sair_base();
     //achar_estoque();
     //achar_bancada();
     //achar_base();
     //pegar_caixa();
     ///sair_estoque();
     //turn180d();
     //Wait(500);
     //OnRevSync(MOTOR_ED, POWER+20,0);
     //while((Sensor(LIGHT_OUT) < COR_PRATA_LMI || Sensor(LIGHT_OUT)> COR_PRATA_LMS)){
     //}
     //Off(MOTOR_ED);
     
     //RotateMotorEx(MOTOR_ED, POWER, GRAU_PARA_GIRO_90, 100, true, true);//DIREITA
     //RotateMotorEx(MOTOR_ED, POWER, GRAU_PARA_GIRO_90, -100, true, true);//ESQUERDA
}



// ------- Mudar o sair da base ------- //
// ------- Fazer a nova bussola ------- //

// Fazer teste para sentido do giro
// Fazer teste pro bluetooth acionar tudo
// Fazer teste do deslocamento na interface
// Mudar o teste da bussola

// FAZER A TASK QUE VAI DEIXAR O ROBO ENTRANDO NA OPERAÇÃO


// - fazer teste para chegar no estoque
